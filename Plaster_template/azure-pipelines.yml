trigger:
  branches:
    include:
      - master
      - feature/*
  paths:
    exclude:
      - README.md

pool:
  vmImage: "windows-2019"

variables:
  - group: General-build-variable

stages:
  - stage: Test
    jobs:
      - job: TestJob
        steps:
          - task: PowerShell@2
            displayName: Install InvokeBuild module on the build agent
            inputs:
              targetType: "inline"
              pwsh: true
              script: |
                if (-not (Get-Module -Name InvokeBuild -ListAvailable)) {
                  Install-Module InvokeBuild -Force
                }
                Import-Module InvokeBuild

          - task: PowerShell@2
            displayName: Analyze code with PSScriptAnalyzer
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: false
              script: Invoke-Build -Task Analyze -ModuleName $(module.Name)
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: PublishTestResults@2
            displayName: Publish code analysis results
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "NUnit"
              testResultsFiles: "$(System.DefaultWorkingDirectory)/**/AnalysisResults*.xml"
              failTaskOnFailedTests: true

          - task: PowerShell@2
            displayName: Test code with Pester tests
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: false
              script: Invoke-Build -Task Test -ModuleName $(module.Name)
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: PublishTestResults@2
            displayName: Publish test results
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "NUnit"
              testResultsFiles: "$(System.DefaultWorkingDirectory)/**/TestResults*.xml"
              failTaskOnFailedTests: true

          - task: PowerShell@2
            displayName: Verify code coverage
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: true
              script: Invoke-Build -Task CodeCoverage -ModuleName $(module.Name)
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: PublishCodeCoverageResults@1
            displayName: Publish code coverage results
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: "JaCoCo"
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/CodeCoverageResults*.xml"
              pathToSources: "$(System.DefaultWorkingDirectory)/$(module.Name)/"
              failIfCoverageEmpty: true
          
          - task: PowerShell@2
            displayName: Building Markdown Help Files
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: true
              script: Invoke-Build -Task BuildingHelpFiles -ModuleName $(module.Name)
              workingDirectory: $(System.DefaultWorkingDirectory)
          
          - task: PublishBuildArtifacts@1
            displayName: Publish Markdown files
            inputs:
              PathtoPublish: 'D:\a\1\s\build\Help'
              ArtifactName: 'help'
              publishLocation: 'Container'

          - task: PowerShell@2
            displayName: "Checking if ARM files are present for testing."
            inputs:
              targetType: "inline"
              script: |
                #Setting up variable for testing of AMR templates
                if (Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/$(module.Name)/" -Filter *.json -Recurse -ErrorAction SilentlyContinue){
                  Write-Output -InputObject "ARM Files found and will be tested. Enable trigger for next phase."
                  Write-Output -InputObject "##vso[task.setvariable variable=ARMTemplates;]ARMPresent"

                  #Importing files to exclude
                  Write-Output -InputObject "Checking exclusion file."
                  Write-Output -InputObject "##vso[task.setvariable variable=AzSSkipFiles;]$Null"
                  if (Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/$(module.Name)/AzSSkipFiles.csv" -ErrorAction SilentlyContinue){
                    $InputFiles = Get-Content -Path "$(System.DefaultWorkingDirectory)/$(module.Name)/AzSSkipFiles.csv"
                    Write-Output -InputObject "##vso[task.setvariable variable=AzSSkipFiles;]$InputFiles"
                  }
                }
                Else{
                  Write-Output -InputObject "NO ARM Files found and test phase will be skipped."
                }

          - task: AzSKARMTemplateChecker@4
            displayName: "Checking ARM templates in the module."
            condition: eq(variables['ARMTemplates'], 'ARMPresent')
            inputs:
              ARMTemplateFilePath: "$(System.DefaultWorkingDirectory)/$(module.Name)"
              ARMTemplateParameterFilePath: "$(System.DefaultWorkingDirectory)/$(module.Name)"
              ExcludeFiles: $(AzSSkipFiles)
              SkipControlsFromFile: "$(System.DefaultWorkingDirectory)/$(module.Name)/AzSSkipControlsFromFile.csv"
          
  - stage: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) # Create builds only from the master branch
    jobs:
      - job: BuildJob
        steps:
          - task: PowerShell@2
            displayName: Install InvokeBuild module on the build agent
            inputs:
              targetType: "inline"
              pwsh: true
              script: |
                if (-not (Get-Module -Name InvokeBuild -ListAvailable)) {
                  Install-Module InvokeBuild -Force
                }
                Import-Module InvokeBuild

          - task: PowerShell@2
            displayName: Build PowerShell module
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: false
              script: Invoke-Build -Task Build -Configuration Release -Sourcelocation $(module.SourceLocation) -ModuleName $(module.Name) -ADOPat $(System.AccessToken) -acceptableCodeCoveragePercent $(acceptableCodeCoveragePercent)
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: NuGetCommand@2
            displayName: Create a NuGet package
            inputs:
              command: "pack"
              packagesToPack: "$(System.DefaultWorkingDirectory)/build/**/*.nuspec"
              packDestination: "$(Build.ArtifactStagingDirectory)"

          - task: PublishBuildArtifacts@1
            displayName: Publish build artifact
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "$(module.Name)"
              publishLocation: Container

  - stage: Publish
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) # Publish the module only from the master branch
    jobs:
      - job: PublishJob
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: Download Build Artifacts
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: '$(module.Name)'
            itemPattern: '**/*.nupkg'
            downloadPath: '$(Pipeline.Workspace)'

        - task: NuGetCommand@2
          displayName: Publish module to NuGet feed
          inputs:
            command: "push"
            packagesToPush: "$(Pipeline.Workspace)/**/*.nupkg"
            nuGetFeedType: "internal"
            publishVstsFeed: "$(module.FeedName)"
